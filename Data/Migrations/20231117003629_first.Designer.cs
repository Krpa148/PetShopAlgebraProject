// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetShopAlgebraProject.Data;

#nullable disable

namespace PetShopAlgebraProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231117003629_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "31e5c1c0-4ded-4516-bedf-f2a252c47ea8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f440c61c-4424-49de-acd7-2150783336b8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetShopAlgebraProject.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Mačka"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Pas"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Slon"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Iguana"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Čimpanza"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Gorila"
                        },
                        new
                        {
                            Id = 7,
                            Title = "Lav"
                        },
                        new
                        {
                            Id = 8,
                            Title = "Žohar"
                        },
                        new
                        {
                            Id = 9,
                            Title = "Kameleon"
                        },
                        new
                        {
                            Id = 10,
                            Title = "Činčila"
                        },
                        new
                        {
                            Id = 11,
                            Title = "Hrčak"
                        });
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Teritorijalna, nije dobra s drugim životinjama",
                            Image = "Felix.jpg",
                            Name = "Felix",
                            Price = 25.50m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Živahan i veseo mačak",
                            Image = "Tom.jpg",
                            Name = "Tom",
                            Price = 30m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Umiljat, prelijepog krzna",
                            Image = "Sylvester.jpg",
                            Name = "Sylvester",
                            Price = 28m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Mirna životinja",
                            Image = "Dumbo.jpg",
                            Name = "Dumbo",
                            Price = 650m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Razigran i pametan ljubimac",
                            Image = "Karlo.jpg",
                            Name = "Karlo",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Samo za stručne vlasnike",
                            Image = "Goran.jpg",
                            Name = "Goran",
                            Price = 300m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Vjeran i drag",
                            Image = "Smoki.jpg",
                            Name = "Smoki",
                            Price = 20m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Odrastao u divljini, nezahtjevan a privržen",
                            Image = "Floki.jpg",
                            Name = "Floki",
                            Price = 15m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Razigrana čivava",
                            Image = "Bobi.jpg",
                            Name = "Bobi",
                            Price = 45m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Prekrasne zelene boje",
                            Image = "Sebastijan.jpg",
                            Name = "Sebastijan",
                            Price = 70m
                        },
                        new
                        {
                            Id = 11,
                            Description = "Now you see him...",
                            Image = "John_Cena.jpg",
                            Name = "John Cena",
                            Price = 130m
                        },
                        new
                        {
                            Id = 12,
                            Description = "Uzgojen za prehranu",
                            Image = "Alain.jpg",
                            Name = "Alain",
                            Price = 2m
                        },
                        new
                        {
                            Id = 13,
                            Description = "Jako veseo i razigran hrčak",
                            Image = "Pero.jpg",
                            Name = "Pero",
                            Price = 10m
                        },
                        new
                        {
                            Id = 14,
                            Description = "Draga životinja, osobito djeci, ali voli ugristi",
                            Image = "Charlie.jpg",
                            Name = "Charlie",
                            Price = 30m
                        },
                        new
                        {
                            Id = 15,
                            Description = "Samo uz predodžbu potrebnih dozvola",
                            Image = "Baltazar.jpg",
                            Name = "Baltazar",
                            Price = 450m
                        });
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.PetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PetId");

                    b.ToTable("PetCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            PetId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            PetId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            PetId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            PetId = 7
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            PetId = 8
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            PetId = 9
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            PetId = 4
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            PetId = 10
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            PetId = 5
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            PetId = 6
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 7,
                            PetId = 15
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 8,
                            PetId = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 9,
                            PetId = 11
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 10,
                            PetId = 14
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 11,
                            PetId = 13
                        });
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.PetStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<bool>("Sold")
                        .HasColumnType("bit");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("StatusId");

                    b.ToTable("PetStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PetId = 1,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 2,
                            PetId = 2,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 3,
                            PetId = 3,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 4,
                            PetId = 4,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 5,
                            PetId = 5,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 6,
                            PetId = 6,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 7,
                            PetId = 7,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 8,
                            PetId = 8,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 9,
                            PetId = 9,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 10,
                            PetId = 10,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 11,
                            PetId = 11,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 12,
                            PetId = 12,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 13,
                            PetId = 13,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 14,
                            PetId = 14,
                            Reserved = false,
                            Sold = false
                        },
                        new
                        {
                            Id = 15,
                            PetId = 15,
                            Reserved = false,
                            Sold = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PetShopAlgebraProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PetShopAlgebraProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetShopAlgebraProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PetShopAlgebraProject.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.PetCategory", b =>
                {
                    b.HasOne("PetShopAlgebraProject.Models.Category", null)
                        .WithMany("PetCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetShopAlgebraProject.Models.Pet", null)
                        .WithMany("PetCategories")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.PetStatus", b =>
                {
                    b.HasOne("PetShopAlgebraProject.Models.Pet", null)
                        .WithMany("PetStatus")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetShopAlgebraProject.Data.ApplicationUser", null)
                        .WithMany("PetStatus")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("PetShopAlgebraProject.Data.ApplicationUser", b =>
                {
                    b.Navigation("PetStatus");
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.Category", b =>
                {
                    b.Navigation("PetCategories");
                });

            modelBuilder.Entity("PetShopAlgebraProject.Models.Pet", b =>
                {
                    b.Navigation("PetCategories");

                    b.Navigation("PetStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
